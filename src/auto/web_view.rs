// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use cairo;
use gdk;
use gdk_sys;
use gio;
use gio_sys;
use glib;
use glib::object::Cast;
use glib::object::IsA;
use glib::signal::connect_raw;
use glib::signal::SignalHandlerId;
use glib::translate::*;
use glib::GString;
use glib::StaticType;
use glib::ToValue;
use glib::Value;
use glib_sys;
use gobject_sys;
use gtk;
#[cfg(any(feature = "v2_6", feature = "dox"))]
use gtk_sys;
use java_script_core;
use libc;
use std::boxed::Box as Box_;
use std::fmt;
use std::mem;
use std::mem::transmute;
use std::pin::Pin;
use std::ptr;
use webkit2_sys;
#[cfg(any(feature = "v2_2", feature = "dox"))]
use AuthenticationRequest;
#[cfg(any(feature = "v2_28", feature = "dox"))]
use AutomationBrowsingContextPresentation;
use BackForwardList;
use BackForwardListItem;
#[cfg(any(feature = "v2_8", feature = "dox"))]
use ColorChooserRequest;
use ContextMenu;
use Download;
#[cfg(any(feature = "v2_10", feature = "dox"))]
use EditorState;
use FileChooserRequest;
use FindController;
use FormSubmissionRequest;
use HitTestResult;
#[cfg(any(feature = "v2_28", feature = "dox"))]
use InputMethodContext;
use InsecureContentEvent;
use JavascriptResult;
use LoadEvent;
#[cfg(any(feature = "v2_6", feature = "dox"))]
use NavigationAction;
#[cfg(any(feature = "v2_8", feature = "dox"))]
use Notification;
#[cfg(any(feature = "v2_28", feature = "dox"))]
use OptionMenu;
use PermissionRequest;
use PolicyDecision;
use PolicyDecisionType;
use PrintOperation;
use SaveMode;
use ScriptDialog;
use Settings;
use SnapshotOptions;
use SnapshotRegion;
use URIRequest;
#[cfg(any(feature = "v2_6", feature = "dox"))]
use UserContentManager;
#[cfg(any(feature = "v2_28", feature = "dox"))]
use UserMessage;
use WebContext;
use WebInspector;
#[cfg(any(feature = "v2_20", feature = "dox"))]
use WebProcessTerminationReason;
use WebResource;
use WebViewBase;
#[cfg(any(feature = "v2_12", feature = "dox"))]
use WebViewSessionState;
#[cfg(any(feature = "v2_16", feature = "dox"))]
use WebsiteDataManager;
use WindowProperties;
use crate::WebsitePolicies;

glib_wrapper! {
    pub struct WebView(Object<webkit2_sys::WebKitWebView, webkit2_sys::WebKitWebViewClass, WebViewClass>) @extends WebViewBase, gtk::Container, gtk::Widget;

    match fn {
        get_type => || webkit2_sys::webkit_web_view_get_type(),
    }
}

impl WebView {
    pub fn new() -> WebView {
        assert_initialized_main_thread!();
        unsafe {
            gtk::Widget::from_glib_none(webkit2_sys::webkit_web_view_new()).unsafe_cast()
        }
    }

    pub fn with_context<P: IsA<WebContext>>(context: &P) -> WebView {
        skip_assert_initialized!();
        unsafe {
            gtk::Widget::from_glib_none(webkit2_sys::webkit_web_view_new_with_context(context.as_ref().to_glib_none().0)).unsafe_cast()
        }
    }

    #[cfg(any(feature = "v2_4", feature = "dox"))]
    pub fn with_related_view<P: IsA<WebView>>(web_view: &P) -> WebView {
        skip_assert_initialized!();
        unsafe {
            gtk::Widget::from_glib_full(webkit2_sys::webkit_web_view_new_with_related_view(web_view.as_ref().to_glib_none().0)).unsafe_cast()
        }
    }

    #[cfg(any(feature = "v2_6", feature = "dox"))]
    pub fn with_settings<P: IsA<Settings>>(settings: &P) -> WebView {
        skip_assert_initialized!();
        unsafe {
            gtk::Widget::from_glib_none(webkit2_sys::webkit_web_view_new_with_settings(settings.as_ref().to_glib_none().0)).unsafe_cast()
        }
    }

    #[cfg(any(feature = "v2_6", feature = "dox"))]
    pub fn with_user_content_manager<P: IsA<UserContentManager>>(user_content_manager: &P) -> WebView {
        skip_assert_initialized!();
        unsafe {
            gtk::Widget::from_glib_none(webkit2_sys::webkit_web_view_new_with_user_content_manager(user_content_manager.as_ref().to_glib_none().0)).unsafe_cast()
        }
    }
}

impl Default for WebView {
    fn default() -> Self {
        Self::new()
    }
}

#[derive(Clone, Default)]
pub struct WebViewBuilder {
    #[cfg(any(feature = "v2_28", feature = "dox"))]
    automation_presentation_type: Option<AutomationBrowsingContextPresentation>,
    #[cfg(any(feature = "v2_8", feature = "dox"))]
    editable: Option<bool>,
    #[cfg(any(feature = "v2_18", feature = "dox"))]
    is_controlled_by_automation: Option<bool>,
    #[cfg(any(feature = "v2_16", feature = "dox"))]
    is_ephemeral: Option<bool>,
    #[cfg(any(feature = "v2_4", feature = "dox"))]
    related_view: Option<WebView>,
    #[cfg(any(feature = "v2_6", feature = "dox"))]
    settings: Option<Settings>,
    #[cfg(any(feature = "v2_6", feature = "dox"))]
    user_content_manager: Option<UserContentManager>,
    web_context: Option<WebContext>,
    website_policies: Option<WebsitePolicies>,
    zoom_level: Option<f64>,
    border_width: Option<u32>,
    child: Option<gtk::Widget>,
    //resize-mode: /*Unknown type*/,
    app_paintable: Option<bool>,
    can_default: Option<bool>,
    can_focus: Option<bool>,
    #[cfg(any(feature = "v2_18", feature = "dox"))]
    double_buffered: Option<bool>,
    //events: /*Unknown type*/,
    #[cfg(any(feature = "v3_0", feature = "dox"))]
    expand: Option<bool>,
    #[cfg(any(feature = "v3_20", feature = "dox"))]
    focus_on_click: Option<bool>,
    //halign: /*Unknown type*/,
    has_default: Option<bool>,
    has_focus: Option<bool>,
    #[cfg(any(feature = "v2_12", feature = "dox"))]
    has_tooltip: Option<bool>,
    height_request: Option<i32>,
    #[cfg(any(feature = "v3_0", feature = "dox"))]
    hexpand: Option<bool>,
    #[cfg(any(feature = "v3_0", feature = "dox"))]
    hexpand_set: Option<bool>,
    is_focus: Option<bool>,
    #[cfg(any(feature = "v3_0", feature = "dox"))]
    margin: Option<i32>,
    #[cfg(any(feature = "v3_0", feature = "dox"))]
    margin_bottom: Option<i32>,
    #[cfg(any(feature = "v3_12", feature = "dox"))]
    margin_end: Option<i32>,
    #[cfg(any(feature = "v3_0", feature = "dox"))]
    margin_left: Option<i32>,
    #[cfg(any(feature = "v3_0", feature = "dox"))]
    margin_right: Option<i32>,
    #[cfg(any(feature = "v3_12", feature = "dox"))]
    margin_start: Option<i32>,
    #[cfg(any(feature = "v3_0", feature = "dox"))]
    margin_top: Option<i32>,
    name: Option<String>,
    no_show_all: Option<bool>,
    #[cfg(any(feature = "v3_8", feature = "dox"))]
    opacity: Option<f64>,
    parent: Option<gtk::Container>,
    receives_default: Option<bool>,
    sensitive: Option<bool>,
    //style: /*Unknown type*/,
    #[cfg(any(feature = "v2_12", feature = "dox"))]
    tooltip_markup: Option<String>,
    #[cfg(any(feature = "v2_12", feature = "dox"))]
    tooltip_text: Option<String>,
    //valign: /*Unknown type*/,
    #[cfg(any(feature = "v3_0", feature = "dox"))]
    vexpand: Option<bool>,
    #[cfg(any(feature = "v3_0", feature = "dox"))]
    vexpand_set: Option<bool>,
    visible: Option<bool>,
    width_request: Option<i32>,
}

impl WebViewBuilder {
    pub fn new() -> Self {
        Self::default()
    }


    pub fn build(self) -> WebView {
        let mut properties: Vec<(&str, &dyn ToValue)> = vec![];
        #[cfg(any(feature = "v2_28", feature = "dox"))]
        {
            if let Some(ref automation_presentation_type) = self.automation_presentation_type {
                properties.push(("automation-presentation-type", automation_presentation_type));
            }
        }
        #[cfg(any(feature = "v2_8", feature = "dox"))]
        {
            if let Some(ref editable) = self.editable {
                properties.push(("editable", editable));
            }
        }
        #[cfg(any(feature = "v2_18", feature = "dox"))]
        {
            if let Some(ref is_controlled_by_automation) = self.is_controlled_by_automation {
                properties.push(("is-controlled-by-automation", is_controlled_by_automation));
            }
        }
        #[cfg(any(feature = "v2_16", feature = "dox"))]
        {
            if let Some(ref is_ephemeral) = self.is_ephemeral {
                properties.push(("is-ephemeral", is_ephemeral));
            }
        }
        #[cfg(any(feature = "v2_4", feature = "dox"))]
        {
            if let Some(ref related_view) = self.related_view {
                properties.push(("related-view", related_view));
            }
        }
        #[cfg(any(feature = "v2_6", feature = "dox"))]
        {
            if let Some(ref settings) = self.settings {
                properties.push(("settings", settings));
            }
        }
        #[cfg(any(feature = "v2_6", feature = "dox"))]
        {
            if let Some(ref user_content_manager) = self.user_content_manager {
                properties.push(("user-content-manager", user_content_manager));
            }
        }
        if let Some(ref web_context) = self.web_context {
            properties.push(("web-context", web_context));
        }
        if let Some(ref website_policies) = self.website_policies {
            properties.push(("website-policies", website_policies));
        }
        if let Some(ref zoom_level) = self.zoom_level {
            properties.push(("zoom-level", zoom_level));
        }
        if let Some(ref border_width) = self.border_width {
            properties.push(("border-width", border_width));
        }
        if let Some(ref child) = self.child {
            properties.push(("child", child));
        }
        if let Some(ref app_paintable) = self.app_paintable {
            properties.push(("app-paintable", app_paintable));
        }
        if let Some(ref can_default) = self.can_default {
            properties.push(("can-default", can_default));
        }
        if let Some(ref can_focus) = self.can_focus {
            properties.push(("can-focus", can_focus));
        }
        #[cfg(any(feature = "v2_18", feature = "dox"))]
        {
            if let Some(ref double_buffered) = self.double_buffered {
                properties.push(("double-buffered", double_buffered));
            }
        }
        #[cfg(any(feature = "v3_0", feature = "dox"))]
        {
            if let Some(ref expand) = self.expand {
                properties.push(("expand", expand));
            }
        }
        #[cfg(any(feature = "v3_20", feature = "dox"))]
        {
            if let Some(ref focus_on_click) = self.focus_on_click {
                properties.push(("focus-on-click", focus_on_click));
            }
        }
        if let Some(ref has_default) = self.has_default {
            properties.push(("has-default", has_default));
        }
        if let Some(ref has_focus) = self.has_focus {
            properties.push(("has-focus", has_focus));
        }
        #[cfg(any(feature = "v2_12", feature = "dox"))]
        {
            if let Some(ref has_tooltip) = self.has_tooltip {
                properties.push(("has-tooltip", has_tooltip));
            }
        }
        if let Some(ref height_request) = self.height_request {
            properties.push(("height-request", height_request));
        }
        #[cfg(any(feature = "v3_0", feature = "dox"))]
        {
            if let Some(ref hexpand) = self.hexpand {
                properties.push(("hexpand", hexpand));
            }
        }
        #[cfg(any(feature = "v3_0", feature = "dox"))]
        {
            if let Some(ref hexpand_set) = self.hexpand_set {
                properties.push(("hexpand-set", hexpand_set));
            }
        }
        if let Some(ref is_focus) = self.is_focus {
            properties.push(("is-focus", is_focus));
        }
        #[cfg(any(feature = "v3_0", feature = "dox"))]
        {
            if let Some(ref margin) = self.margin {
                properties.push(("margin", margin));
            }
        }
        #[cfg(any(feature = "v3_0", feature = "dox"))]
        {
            if let Some(ref margin_bottom) = self.margin_bottom {
                properties.push(("margin-bottom", margin_bottom));
            }
        }
        #[cfg(any(feature = "v3_12", feature = "dox"))]
        {
            if let Some(ref margin_end) = self.margin_end {
                properties.push(("margin-end", margin_end));
            }
        }
        #[cfg(any(feature = "v3_0", feature = "dox"))]
        {
            if let Some(ref margin_left) = self.margin_left {
                properties.push(("margin-left", margin_left));
            }
        }
        #[cfg(any(feature = "v3_0", feature = "dox"))]
        {
            if let Some(ref margin_right) = self.margin_right {
                properties.push(("margin-right", margin_right));
            }
        }
        #[cfg(any(feature = "v3_12", feature = "dox"))]
        {
            if let Some(ref margin_start) = self.margin_start {
                properties.push(("margin-start", margin_start));
            }
        }
        #[cfg(any(feature = "v3_0", feature = "dox"))]
        {
            if let Some(ref margin_top) = self.margin_top {
                properties.push(("margin-top", margin_top));
            }
        }
        if let Some(ref name) = self.name {
            properties.push(("name", name));
        }
        if let Some(ref no_show_all) = self.no_show_all {
            properties.push(("no-show-all", no_show_all));
        }
        #[cfg(any(feature = "v3_8", feature = "dox"))]
        {
            if let Some(ref opacity) = self.opacity {
                properties.push(("opacity", opacity));
            }
        }
        if let Some(ref parent) = self.parent {
            properties.push(("parent", parent));
        }
        if let Some(ref receives_default) = self.receives_default {
            properties.push(("receives-default", receives_default));
        }
        if let Some(ref sensitive) = self.sensitive {
            properties.push(("sensitive", sensitive));
        }
        #[cfg(any(feature = "v2_12", feature = "dox"))]
        {
            if let Some(ref tooltip_markup) = self.tooltip_markup {
                properties.push(("tooltip-markup", tooltip_markup));
            }
        }
        #[cfg(any(feature = "v2_12", feature = "dox"))]
        {
            if let Some(ref tooltip_text) = self.tooltip_text {
                properties.push(("tooltip-text", tooltip_text));
            }
        }
        #[cfg(any(feature = "v3_0", feature = "dox"))]
        {
            if let Some(ref vexpand) = self.vexpand {
                properties.push(("vexpand", vexpand));
            }
        }
        #[cfg(any(feature = "v3_0", feature = "dox"))]
        {
            if let Some(ref vexpand_set) = self.vexpand_set {
                properties.push(("vexpand-set", vexpand_set));
            }
        }
        if let Some(ref visible) = self.visible {
            properties.push(("visible", visible));
        }
        if let Some(ref width_request) = self.width_request {
            properties.push(("width-request", width_request));
        }
        let ret = glib::Object::new(WebView::static_type(), &properties)
            .expect("object new")
            .downcast::<WebView>()
            .expect("downcast");
    ret
    }

    #[cfg(any(feature = "v2_28", feature = "dox"))]
    pub fn automation_presentation_type(mut self, automation_presentation_type: AutomationBrowsingContextPresentation) -> Self {
        self.automation_presentation_type = Some(automation_presentation_type);
        self
    }

    #[cfg(any(feature = "v2_8", feature = "dox"))]
    pub fn editable(mut self, editable: bool) -> Self {
        self.editable = Some(editable);
        self
    }

    #[cfg(any(feature = "v2_18", feature = "dox"))]
    pub fn is_controlled_by_automation(mut self, is_controlled_by_automation: bool) -> Self {
        self.is_controlled_by_automation = Some(is_controlled_by_automation);
        self
    }

    #[cfg(any(feature = "v2_16", feature = "dox"))]
    pub fn is_ephemeral(mut self, is_ephemeral: bool) -> Self {
        self.is_ephemeral = Some(is_ephemeral);
        self
    }

    #[cfg(any(feature = "v2_4", feature = "dox"))]
    pub fn related_view<P: IsA<WebView>>(mut self, related_view: &P) -> Self {
        self.related_view = Some(related_view.clone().upcast());
        self
    }

    #[cfg(any(feature = "v2_6", feature = "dox"))]
    pub fn settings<P: IsA<Settings>>(mut self, settings: &P) -> Self {
        self.settings = Some(settings.clone().upcast());
        self
    }

    #[cfg(any(feature = "v2_6", feature = "dox"))]
    pub fn user_content_manager<P: IsA<UserContentManager>>(mut self, user_content_manager: &P) -> Self {
        self.user_content_manager = Some(user_content_manager.clone().upcast());
        self
    }

    pub fn web_context<P: IsA<WebContext>>(mut self, web_context: &P) -> Self {
        self.web_context = Some(web_context.clone().upcast());
        self
    }

    pub fn website_policies<P: IsA<WebsitePolicies>>(mut self, website_policies: &P) -> Self {
        self.website_policies = Some(website_policies.clone().upcast());
        self
    }

    pub fn zoom_level(mut self, zoom_level: f64) -> Self {
        self.zoom_level = Some(zoom_level);
        self
    }

    pub fn border_width(mut self, border_width: u32) -> Self {
        self.border_width = Some(border_width);
        self
    }

    pub fn child<P: IsA<gtk::Widget>>(mut self, child: &P) -> Self {
        self.child = Some(child.clone().upcast());
        self
    }

    pub fn app_paintable(mut self, app_paintable: bool) -> Self {
        self.app_paintable = Some(app_paintable);
        self
    }

    pub fn can_default(mut self, can_default: bool) -> Self {
        self.can_default = Some(can_default);
        self
    }

    pub fn can_focus(mut self, can_focus: bool) -> Self {
        self.can_focus = Some(can_focus);
        self
    }

    #[cfg(any(feature = "v2_18", feature = "dox"))]
    pub fn double_buffered(mut self, double_buffered: bool) -> Self {
        self.double_buffered = Some(double_buffered);
        self
    }

    #[cfg(any(feature = "v3_0", feature = "dox"))]
    pub fn expand(mut self, expand: bool) -> Self {
        self.expand = Some(expand);
        self
    }

    #[cfg(any(feature = "v3_20", feature = "dox"))]
    pub fn focus_on_click(mut self, focus_on_click: bool) -> Self {
        self.focus_on_click = Some(focus_on_click);
        self
    }

    pub fn has_default(mut self, has_default: bool) -> Self {
        self.has_default = Some(has_default);
        self
    }

    pub fn has_focus(mut self, has_focus: bool) -> Self {
        self.has_focus = Some(has_focus);
        self
    }

    #[cfg(any(feature = "v2_12", feature = "dox"))]
    pub fn has_tooltip(mut self, has_tooltip: bool) -> Self {
        self.has_tooltip = Some(has_tooltip);
        self
    }

    pub fn height_request(mut self, height_request: i32) -> Self {
        self.height_request = Some(height_request);
        self
    }

    #[cfg(any(feature = "v3_0", feature = "dox"))]
    pub fn hexpand(mut self, hexpand: bool) -> Self {
        self.hexpand = Some(hexpand);
        self
    }

    #[cfg(any(feature = "v3_0", feature = "dox"))]
    pub fn hexpand_set(mut self, hexpand_set: bool) -> Self {
        self.hexpand_set = Some(hexpand_set);
        self
    }

    pub fn is_focus(mut self, is_focus: bool) -> Self {
        self.is_focus = Some(is_focus);
        self
    }

    #[cfg(any(feature = "v3_0", feature = "dox"))]
    pub fn margin(mut self, margin: i32) -> Self {
        self.margin = Some(margin);
        self
    }

    #[cfg(any(feature = "v3_0", feature = "dox"))]
    pub fn margin_bottom(mut self, margin_bottom: i32) -> Self {
        self.margin_bottom = Some(margin_bottom);
        self
    }

    #[cfg(any(feature = "v3_12", feature = "dox"))]
    pub fn margin_end(mut self, margin_end: i32) -> Self {
        self.margin_end = Some(margin_end);
        self
    }

    #[cfg(any(feature = "v3_0", feature = "dox"))]
    pub fn margin_left(mut self, margin_left: i32) -> Self {
        self.margin_left = Some(margin_left);
        self
    }

    #[cfg(any(feature = "v3_0", feature = "dox"))]
    pub fn margin_right(mut self, margin_right: i32) -> Self {
        self.margin_right = Some(margin_right);
        self
    }

    #[cfg(any(feature = "v3_12", feature = "dox"))]
    pub fn margin_start(mut self, margin_start: i32) -> Self {
        self.margin_start = Some(margin_start);
        self
    }

    #[cfg(any(feature = "v3_0", feature = "dox"))]
    pub fn margin_top(mut self, margin_top: i32) -> Self {
        self.margin_top = Some(margin_top);
        self
    }

    pub fn name(mut self, name: &str) -> Self {
        self.name = Some(name.to_string());
        self
    }

    pub fn no_show_all(mut self, no_show_all: bool) -> Self {
        self.no_show_all = Some(no_show_all);
        self
    }

    #[cfg(any(feature = "v3_8", feature = "dox"))]
    pub fn opacity(mut self, opacity: f64) -> Self {
        self.opacity = Some(opacity);
        self
    }

    pub fn parent<P: IsA<gtk::Container>>(mut self, parent: &P) -> Self {
        self.parent = Some(parent.clone().upcast());
        self
    }

    pub fn receives_default(mut self, receives_default: bool) -> Self {
        self.receives_default = Some(receives_default);
        self
    }

    pub fn sensitive(mut self, sensitive: bool) -> Self {
        self.sensitive = Some(sensitive);
        self
    }

    #[cfg(any(feature = "v2_12", feature = "dox"))]
    pub fn tooltip_markup(mut self, tooltip_markup: &str) -> Self {
        self.tooltip_markup = Some(tooltip_markup.to_string());
        self
    }

    #[cfg(any(feature = "v2_12", feature = "dox"))]
    pub fn tooltip_text(mut self, tooltip_text: &str) -> Self {
        self.tooltip_text = Some(tooltip_text.to_string());
        self
    }

    #[cfg(any(feature = "v3_0", feature = "dox"))]
    pub fn vexpand(mut self, vexpand: bool) -> Self {
        self.vexpand = Some(vexpand);
        self
    }

    #[cfg(any(feature = "v3_0", feature = "dox"))]
    pub fn vexpand_set(mut self, vexpand_set: bool) -> Self {
        self.vexpand_set = Some(vexpand_set);
        self
    }

    pub fn visible(mut self, visible: bool) -> Self {
        self.visible = Some(visible);
        self
    }

    pub fn width_request(mut self, width_request: i32) -> Self {
        self.width_request = Some(width_request);
        self
    }
}

pub const NONE_WEB_VIEW: Option<&WebView> = None;

pub trait WebViewExt: 'static {
    fn can_execute_editing_command<P: IsA<gio::Cancellable>, Q: FnOnce(Result<(), glib::Error>) + Send + 'static>(&self, command: &str, cancellable: Option<&P>, callback: Q);

    
    fn can_execute_editing_command_future(&self, command: &str) -> Pin<Box_<dyn std::future::Future<Output = Result<(), glib::Error>> + 'static>>;

    fn can_go_back(&self) -> bool;

    fn can_go_forward(&self) -> bool;

    fn can_show_mime_type(&self, mime_type: &str) -> bool;

    fn download_uri(&self, uri: &str) -> Option<Download>;

    fn execute_editing_command(&self, command: &str);

    #[cfg(any(feature = "v2_10", feature = "dox"))]
    fn execute_editing_command_with_argument(&self, command: &str, argument: &str);

    #[cfg(any(feature = "v2_28", feature = "dox"))]
    fn get_automation_presentation_type(&self) -> AutomationBrowsingContextPresentation;

    fn get_back_forward_list(&self) -> Option<BackForwardList>;

    #[cfg(any(feature = "v2_8", feature = "dox"))]
    fn get_background_color(&self) -> gdk::RGBA;

    fn get_context(&self) -> Option<WebContext>;

    fn get_custom_charset(&self) -> Option<GString>;

    #[cfg(any(feature = "v2_10", feature = "dox"))]
    fn get_editor_state(&self) -> Option<EditorState>;

    fn get_estimated_load_progress(&self) -> f64;

    fn get_favicon(&self) -> Option<cairo::Surface>;

    fn get_find_controller(&self) -> Option<FindController>;

    #[cfg(any(feature = "v2_28", feature = "dox"))]
    fn get_input_method_context(&self) -> Option<InputMethodContext>;

    fn get_inspector(&self) -> Option<WebInspector>;

    #[cfg_attr(feature = "v2_22", deprecated)]
    fn get_javascript_global_context(&self) -> Option<java_script_core::GlobalContextRef>;

    fn get_main_resource(&self) -> Option<WebResource>;

    fn get_page_id(&self) -> u64;

    #[cfg(any(feature = "v2_12", feature = "dox"))]
    fn get_session_state(&self) -> Option<WebViewSessionState>;

    fn get_settings(&self) -> Option<Settings>;

    fn get_snapshot<P: IsA<gio::Cancellable>, Q: FnOnce(Result<cairo::Surface, glib::Error>) + Send + 'static>(&self, region: SnapshotRegion, options: SnapshotOptions, cancellable: Option<&P>, callback: Q);

    
    fn get_snapshot_future(&self, region: SnapshotRegion, options: SnapshotOptions) -> Pin<Box_<dyn std::future::Future<Output = Result<cairo::Surface, glib::Error>> + 'static>>;

    fn get_title(&self) -> Option<GString>;

    fn get_tls_info(&self) -> Option<(gio::TlsCertificate, gio::TlsCertificateFlags)>;

    fn get_uri(&self) -> Option<GString>;

    #[cfg(any(feature = "v2_6", feature = "dox"))]
    fn get_user_content_manager(&self) -> Option<UserContentManager>;

    #[cfg(any(feature = "v2_16", feature = "dox"))]
    fn get_website_data_manager(&self) -> Option<WebsiteDataManager>;

    #[doc(alias = "webkit_web_view_get_website_policies")]
    fn get_website_policies(&self) -> Option<WebsitePolicies>;


    fn get_window_properties(&self) -> Option<WindowProperties>;

    fn get_zoom_level(&self) -> f64;

    fn go_back(&self);

    fn go_forward(&self);

    fn go_to_back_forward_list_item<P: IsA<BackForwardListItem>>(&self, list_item: &P);

    #[cfg(any(feature = "v2_18", feature = "dox"))]
    fn is_controlled_by_automation(&self) -> bool;

    fn is_editable(&self) -> bool;

    #[cfg(any(feature = "v2_16", feature = "dox"))]
    fn is_ephemeral(&self) -> bool;

    fn is_loading(&self) -> bool;

    #[cfg(any(feature = "v2_8", feature = "dox"))]
    fn is_playing_audio(&self) -> bool;

    fn load_alternate_html(&self, content: &str, content_uri: &str, base_uri: Option<&str>);

    #[cfg(any(feature = "v2_6", feature = "dox"))]
    fn load_bytes(&self, bytes: &glib::Bytes, mime_type: Option<&str>, encoding: Option<&str>, base_uri: Option<&str>);

    fn load_html(&self, content: &str, base_uri: Option<&str>);

    fn load_plain_text(&self, plain_text: &str);

    fn load_request<P: IsA<URIRequest>>(&self, request: &P);

    fn load_uri(&self, uri: &str);

    fn reload(&self);

    fn reload_bypass_cache(&self);

    #[cfg(any(feature = "v2_12", feature = "dox"))]
    fn restore_session_state(&self, state: &WebViewSessionState);

    fn run_javascript<P: IsA<gio::Cancellable>, Q: FnOnce(Result<JavascriptResult, glib::Error>) + Send + 'static>(&self, script: &str, cancellable: Option<&P>, callback: Q);

    
    fn run_javascript_future(&self, script: &str) -> Pin<Box_<dyn std::future::Future<Output = Result<JavascriptResult, glib::Error>> + 'static>>;

    fn run_javascript_from_gresource<P: IsA<gio::Cancellable>, Q: FnOnce(Result<JavascriptResult, glib::Error>) + Send + 'static>(&self, resource: &str, cancellable: Option<&P>, callback: Q);

    
    fn run_javascript_from_gresource_future(&self, resource: &str) -> Pin<Box_<dyn std::future::Future<Output = Result<JavascriptResult, glib::Error>> + 'static>>;

    #[cfg(any(feature = "v2_22", feature = "dox"))]
    fn run_javascript_in_world<P: IsA<gio::Cancellable>, Q: FnOnce(Result<JavascriptResult, glib::Error>) + Send + 'static>(&self, script: &str, world_name: &str, cancellable: Option<&P>, callback: Q);

    
    #[cfg(any(feature = "v2_22", feature = "dox"))]
    fn run_javascript_in_world_future(&self, script: &str, world_name: &str) -> Pin<Box_<dyn std::future::Future<Output = Result<JavascriptResult, glib::Error>> + 'static>>;

    fn save<P: IsA<gio::Cancellable>, Q: FnOnce(Result<gio::InputStream, glib::Error>) + Send + 'static>(&self, save_mode: SaveMode, cancellable: Option<&P>, callback: Q);

    
    fn save_future(&self, save_mode: SaveMode) -> Pin<Box_<dyn std::future::Future<Output = Result<gio::InputStream, glib::Error>> + 'static>>;

    fn save_to_file<P: IsA<gio::File>, Q: IsA<gio::Cancellable>, R: FnOnce(Result<(), glib::Error>) + Send + 'static>(&self, file: &P, save_mode: SaveMode, cancellable: Option<&Q>, callback: R);

    
    fn save_to_file_future<P: IsA<gio::File> + Clone + 'static>(&self, file: &P, save_mode: SaveMode) -> Pin<Box_<dyn std::future::Future<Output = Result<(), glib::Error>> + 'static>>;

    #[cfg(any(feature = "v2_28", feature = "dox"))]
    fn send_message_to_page<P: IsA<UserMessage>, Q: IsA<gio::Cancellable>, R: FnOnce(Result<UserMessage, glib::Error>) + Send + 'static>(&self, message: &P, cancellable: Option<&Q>, callback: R);

    
    #[cfg(any(feature = "v2_28", feature = "dox"))]
    fn send_message_to_page_future<P: IsA<UserMessage> + Clone + 'static>(&self, message: &P) -> Pin<Box_<dyn std::future::Future<Output = Result<UserMessage, glib::Error>> + 'static>>;

    #[cfg(any(feature = "v2_8", feature = "dox"))]
    fn set_background_color(&self, rgba: &gdk::RGBA);

    fn set_custom_charset(&self, charset: Option<&str>);

    #[cfg(any(feature = "v2_8", feature = "dox"))]
    fn set_editable(&self, editable: bool);

    #[cfg(any(feature = "v2_28", feature = "dox"))]
    fn set_input_method_context<P: IsA<InputMethodContext>>(&self, context: Option<&P>);

    fn set_settings<P: IsA<Settings>>(&self, settings: &P);

    fn set_zoom_level(&self, zoom_level: f64);

    fn stop_loading(&self);

    #[cfg(any(feature = "v2_12", feature = "dox"))]
    fn try_close(&self);

    #[cfg(any(feature = "v2_8", feature = "dox"))]
    fn get_property_editable(&self) -> bool;

    #[cfg(any(feature = "v2_18", feature = "dox"))]
    fn get_property_is_controlled_by_automation(&self) -> bool;

    #[cfg(any(feature = "v2_16", feature = "dox"))]
    fn get_property_is_ephemeral(&self) -> bool;

    fn get_property_is_loading(&self) -> bool;

    #[cfg(any(feature = "v2_8", feature = "dox"))]
    fn get_property_is_playing_audio(&self) -> bool;

    fn get_property_web_context(&self) -> Option<WebContext>;

    #[cfg(any(feature = "v2_2", feature = "dox"))]
    fn connect_authenticate<F: Fn(&Self, &AuthenticationRequest) -> bool + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_close<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_context_menu<F: Fn(&Self, &ContextMenu, &gdk::Event, &HitTestResult) -> bool + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_context_menu_dismissed<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[cfg(any(feature = "v2_6", feature = "dox"))]
    fn connect_create<F: Fn(&Self, &NavigationAction) -> Option<gtk::Widget> + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_decide_policy<F: Fn(&Self, &PolicyDecision, PolicyDecisionType) -> bool + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_enter_fullscreen<F: Fn(&Self) -> bool + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_insecure_content_detected<F: Fn(&Self, InsecureContentEvent) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_leave_fullscreen<F: Fn(&Self) -> bool + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_load_changed<F: Fn(&Self, LoadEvent) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_load_failed<F: Fn(&Self, LoadEvent, &str, &glib::Error) -> bool + 'static>(&self, f: F) -> SignalHandlerId;

    #[cfg(any(feature = "v2_6", feature = "dox"))]
    fn connect_load_failed_with_tls_errors<F: Fn(&Self, &str, &gio::TlsCertificate, gio::TlsCertificateFlags) -> bool + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_mouse_target_changed<F: Fn(&Self, &HitTestResult, u32) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_permission_request<F: Fn(&Self, &PermissionRequest) -> bool + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_print<F: Fn(&Self, &PrintOperation) -> bool + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_ready_to_show<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_resource_load_started<F: Fn(&Self, &WebResource, &URIRequest) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_run_as_modal<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[cfg(any(feature = "v2_8", feature = "dox"))]
    fn connect_run_color_chooser<F: Fn(&Self, &ColorChooserRequest) -> bool + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_run_file_chooser<F: Fn(&Self, &FileChooserRequest) -> bool + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_script_dialog<F: Fn(&Self, &ScriptDialog) -> bool + 'static>(&self, f: F) -> SignalHandlerId;

    #[cfg(any(feature = "v2_8", feature = "dox"))]
    fn connect_show_notification<F: Fn(&Self, &Notification) -> bool + 'static>(&self, f: F) -> SignalHandlerId;

    #[cfg(any(feature = "v2_28", feature = "dox"))]
    fn connect_show_option_menu<F: Fn(&Self, &OptionMenu, &gdk::Event, &gdk::Rectangle) -> bool + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_submit_form<F: Fn(&Self, &FormSubmissionRequest) + 'static>(&self, f: F) -> SignalHandlerId;

    #[cfg(any(feature = "v2_28", feature = "dox"))]
    fn connect_user_message_received<F: Fn(&Self, &UserMessage) -> bool + 'static>(&self, f: F) -> SignalHandlerId;

    #[cfg_attr(feature = "v2_20", deprecated)]
    fn connect_web_process_crashed<F: Fn(&Self) -> bool + 'static>(&self, f: F) -> SignalHandlerId;

    #[cfg(any(feature = "v2_20", feature = "dox"))]
    fn connect_web_process_terminated<F: Fn(&Self, WebProcessTerminationReason) + 'static>(&self, f: F) -> SignalHandlerId;

    #[cfg(any(feature = "v2_8", feature = "dox"))]
    fn connect_property_editable_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_estimated_load_progress_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_favicon_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_is_loading_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[cfg(any(feature = "v2_8", feature = "dox"))]
    fn connect_property_is_playing_audio_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[cfg(any(feature = "v2_28", feature = "dox"))]
    fn connect_property_page_id_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[cfg(any(feature = "v2_6", feature = "dox"))]
    fn connect_property_settings_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_title_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_uri_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_zoom_level_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;
}

impl<O: IsA<WebView>> WebViewExt for O {
    fn can_execute_editing_command<P: IsA<gio::Cancellable>, Q: FnOnce(Result<(), glib::Error>) + Send + 'static>(&self, command: &str, cancellable: Option<&P>, callback: Q) {
        let user_data: Box_<Q> = Box_::new(callback);
        unsafe extern "C" fn can_execute_editing_command_trampoline<Q: FnOnce(Result<(), glib::Error>) + Send + 'static>(_source_object: *mut gobject_sys::GObject, res: *mut gio_sys::GAsyncResult, user_data: glib_sys::gpointer) {
            let mut error = ptr::null_mut();
            let _ = webkit2_sys::webkit_web_view_can_execute_editing_command_finish(_source_object as *mut _, res, &mut error);
            let result = if error.is_null() { Ok(()) } else { Err(from_glib_full(error)) };
            let callback: Box_<Q> = Box_::from_raw(user_data as *mut _);
            callback(result);
        }
        let callback = can_execute_editing_command_trampoline::<Q>;
        unsafe {
            webkit2_sys::webkit_web_view_can_execute_editing_command(self.as_ref().to_glib_none().0, command.to_glib_none().0, cancellable.map(|p| p.as_ref()).to_glib_none().0, Some(callback), Box_::into_raw(user_data) as *mut _);
        }
    }

    
    fn can_execute_editing_command_future(&self, command: &str) -> Pin<Box_<dyn std::future::Future<Output = Result<(), glib::Error>> + 'static>> {

        let command = String::from(command);
        Box_::pin(gio::GioFuture::new(self, move |obj, send| {
            let cancellable = gio::Cancellable::new();
            obj.can_execute_editing_command(
                &command,
                Some(&cancellable),
                move |res| {
                    send.resolve(res);
                },
            );

            cancellable
        }))
    }

    fn can_go_back(&self) -> bool {
        unsafe {
            from_glib(webkit2_sys::webkit_web_view_can_go_back(self.as_ref().to_glib_none().0))
        }
    }

    fn can_go_forward(&self) -> bool {
        unsafe {
            from_glib(webkit2_sys::webkit_web_view_can_go_forward(self.as_ref().to_glib_none().0))
        }
    }

    fn can_show_mime_type(&self, mime_type: &str) -> bool {
        unsafe {
            from_glib(webkit2_sys::webkit_web_view_can_show_mime_type(self.as_ref().to_glib_none().0, mime_type.to_glib_none().0))
        }
    }

    fn download_uri(&self, uri: &str) -> Option<Download> {
        unsafe {
            from_glib_full(webkit2_sys::webkit_web_view_download_uri(self.as_ref().to_glib_none().0, uri.to_glib_none().0))
        }
    }

    fn execute_editing_command(&self, command: &str) {
        unsafe {
            webkit2_sys::webkit_web_view_execute_editing_command(self.as_ref().to_glib_none().0, command.to_glib_none().0);
        }
    }

    #[cfg(any(feature = "v2_10", feature = "dox"))]
    fn execute_editing_command_with_argument(&self, command: &str, argument: &str) {
        unsafe {
            webkit2_sys::webkit_web_view_execute_editing_command_with_argument(self.as_ref().to_glib_none().0, command.to_glib_none().0, argument.to_glib_none().0);
        }
    }

    #[cfg(any(feature = "v2_28", feature = "dox"))]
    fn get_automation_presentation_type(&self) -> AutomationBrowsingContextPresentation {
        unsafe {
            from_glib(webkit2_sys::webkit_web_view_get_automation_presentation_type(self.as_ref().to_glib_none().0))
        }
    }

    fn get_back_forward_list(&self) -> Option<BackForwardList> {
        unsafe {
            from_glib_none(webkit2_sys::webkit_web_view_get_back_forward_list(self.as_ref().to_glib_none().0))
        }
    }

    #[cfg(any(feature = "v2_8", feature = "dox"))]
    fn get_background_color(&self) -> gdk::RGBA {
        unsafe {
            let mut rgba = gdk::RGBA::uninitialized();
            webkit2_sys::webkit_web_view_get_background_color(self.as_ref().to_glib_none().0, rgba.to_glib_none_mut().0);
            rgba
        }
    }

    fn get_context(&self) -> Option<WebContext> {
        unsafe {
            from_glib_none(webkit2_sys::webkit_web_view_get_context(self.as_ref().to_glib_none().0))
        }
    }

    fn get_custom_charset(&self) -> Option<GString> {
        unsafe {
            from_glib_none(webkit2_sys::webkit_web_view_get_custom_charset(self.as_ref().to_glib_none().0))
        }
    }

    #[cfg(any(feature = "v2_10", feature = "dox"))]
    fn get_editor_state(&self) -> Option<EditorState> {
        unsafe {
            from_glib_none(webkit2_sys::webkit_web_view_get_editor_state(self.as_ref().to_glib_none().0))
        }
    }

    fn get_estimated_load_progress(&self) -> f64 {
        unsafe {
            webkit2_sys::webkit_web_view_get_estimated_load_progress(self.as_ref().to_glib_none().0)
        }
    }

    fn get_favicon(&self) -> Option<cairo::Surface> {
        unsafe {
            from_glib_none(webkit2_sys::webkit_web_view_get_favicon(self.as_ref().to_glib_none().0))
        }
    }

    fn get_find_controller(&self) -> Option<FindController> {
        unsafe {
            from_glib_none(webkit2_sys::webkit_web_view_get_find_controller(self.as_ref().to_glib_none().0))
        }
    }

    #[cfg(any(feature = "v2_28", feature = "dox"))]
    fn get_input_method_context(&self) -> Option<InputMethodContext> {
        unsafe {
            from_glib_none(webkit2_sys::webkit_web_view_get_input_method_context(self.as_ref().to_glib_none().0))
        }
    }

    fn get_inspector(&self) -> Option<WebInspector> {
        unsafe {
            from_glib_none(webkit2_sys::webkit_web_view_get_inspector(self.as_ref().to_glib_none().0))
        }
    }

    fn get_javascript_global_context(&self) -> Option<java_script_core::GlobalContextRef> {
        unsafe {
            from_glib_none(webkit2_sys::webkit_web_view_get_javascript_global_context(self.as_ref().to_glib_none().0))
        }
    }

    fn get_main_resource(&self) -> Option<WebResource> {
        unsafe {
            from_glib_none(webkit2_sys::webkit_web_view_get_main_resource(self.as_ref().to_glib_none().0))
        }
    }

    fn get_page_id(&self) -> u64 {
        unsafe {
            webkit2_sys::webkit_web_view_get_page_id(self.as_ref().to_glib_none().0)
        }
    }

    #[cfg(any(feature = "v2_12", feature = "dox"))]
    fn get_session_state(&self) -> Option<WebViewSessionState> {
        unsafe {
            from_glib_full(webkit2_sys::webkit_web_view_get_session_state(self.as_ref().to_glib_none().0))
        }
    }

    fn get_settings(&self) -> Option<Settings> {
        unsafe {
            from_glib_none(webkit2_sys::webkit_web_view_get_settings(self.as_ref().to_glib_none().0))
        }
    }

    fn get_snapshot<P: IsA<gio::Cancellable>, Q: FnOnce(Result<cairo::Surface, glib::Error>) + Send + 'static>(&self, region: SnapshotRegion, options: SnapshotOptions, cancellable: Option<&P>, callback: Q) {
        let user_data: Box_<Q> = Box_::new(callback);
        unsafe extern "C" fn get_snapshot_trampoline<Q: FnOnce(Result<cairo::Surface, glib::Error>) + Send + 'static>(_source_object: *mut gobject_sys::GObject, res: *mut gio_sys::GAsyncResult, user_data: glib_sys::gpointer) {
            let mut error = ptr::null_mut();
            let ret = webkit2_sys::webkit_web_view_get_snapshot_finish(_source_object as *mut _, res, &mut error);
            let result = if error.is_null() { Ok(from_glib_full(ret)) } else { Err(from_glib_full(error)) };
            let callback: Box_<Q> = Box_::from_raw(user_data as *mut _);
            callback(result);
        }
        let callback = get_snapshot_trampoline::<Q>;
        unsafe {
            webkit2_sys::webkit_web_view_get_snapshot(self.as_ref().to_glib_none().0, region.to_glib(), options.to_glib(), cancellable.map(|p| p.as_ref()).to_glib_none().0, Some(callback), Box_::into_raw(user_data) as *mut _);
        }
    }

    
    fn get_snapshot_future(&self, region: SnapshotRegion, options: SnapshotOptions) -> Pin<Box_<dyn std::future::Future<Output = Result<cairo::Surface, glib::Error>> + 'static>> {

        Box_::pin(gio::GioFuture::new(self, move |obj, send| {
            let cancellable = gio::Cancellable::new();
            obj.get_snapshot(
                region,
                options,
                Some(&cancellable),
                move |res| {
                    send.resolve(res);
                },
            );

            cancellable
        }))
    }

    fn get_title(&self) -> Option<GString> {
        unsafe {
            from_glib_none(webkit2_sys::webkit_web_view_get_title(self.as_ref().to_glib_none().0))
        }
    }

    fn get_tls_info(&self) -> Option<(gio::TlsCertificate, gio::TlsCertificateFlags)> {
        unsafe {
            let mut certificate = ptr::null_mut();
            let mut errors = mem::MaybeUninit::uninit();
            let ret = from_glib(webkit2_sys::webkit_web_view_get_tls_info(self.as_ref().to_glib_none().0, &mut certificate, errors.as_mut_ptr()));
            let errors = errors.assume_init();
            if ret { Some((from_glib_none(certificate), from_glib(errors))) } else { None }
        }
    }

    fn get_uri(&self) -> Option<GString> {
        unsafe {
            from_glib_none(webkit2_sys::webkit_web_view_get_uri(self.as_ref().to_glib_none().0))
        }
    }

    #[cfg(any(feature = "v2_6", feature = "dox"))]
    fn get_user_content_manager(&self) -> Option<UserContentManager> {
        unsafe {
            from_glib_none(webkit2_sys::webkit_web_view_get_user_content_manager(self.as_ref().to_glib_none().0))
        }
    }

    fn get_website_policies(&self) -> Option<WebsitePolicies> {
        unsafe {
            from_glib_none(webkit2_sys::webkit_web_view_get_website_policies(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    #[cfg(any(feature = "v2_16", feature = "dox"))]
    fn get_website_data_manager(&self) -> Option<WebsiteDataManager> {
        unsafe {
            from_glib_none(webkit2_sys::webkit_web_view_get_website_data_manager(self.as_ref().to_glib_none().0))
        }
    }

    fn get_window_properties(&self) -> Option<WindowProperties> {
        unsafe {
            from_glib_none(webkit2_sys::webkit_web_view_get_window_properties(self.as_ref().to_glib_none().0))
        }
    }

    fn get_zoom_level(&self) -> f64 {
        unsafe {
            webkit2_sys::webkit_web_view_get_zoom_level(self.as_ref().to_glib_none().0)
        }
    }

    fn go_back(&self) {
        unsafe {
            webkit2_sys::webkit_web_view_go_back(self.as_ref().to_glib_none().0);
        }
    }

    fn go_forward(&self) {
        unsafe {
            webkit2_sys::webkit_web_view_go_forward(self.as_ref().to_glib_none().0);
        }
    }

    fn go_to_back_forward_list_item<P: IsA<BackForwardListItem>>(&self, list_item: &P) {
        unsafe {
            webkit2_sys::webkit_web_view_go_to_back_forward_list_item(self.as_ref().to_glib_none().0, list_item.as_ref().to_glib_none().0);
        }
    }

    #[cfg(any(feature = "v2_18", feature = "dox"))]
    fn is_controlled_by_automation(&self) -> bool {
        unsafe {
            from_glib(webkit2_sys::webkit_web_view_is_controlled_by_automation(self.as_ref().to_glib_none().0))
        }
    }

    fn is_editable(&self) -> bool {
        unsafe {
            from_glib(webkit2_sys::webkit_web_view_is_editable(self.as_ref().to_glib_none().0))
        }
    }

    #[cfg(any(feature = "v2_16", feature = "dox"))]
    fn is_ephemeral(&self) -> bool {
        unsafe {
            from_glib(webkit2_sys::webkit_web_view_is_ephemeral(self.as_ref().to_glib_none().0))
        }
    }

    fn is_loading(&self) -> bool {
        unsafe {
            from_glib(webkit2_sys::webkit_web_view_is_loading(self.as_ref().to_glib_none().0))
        }
    }

    #[cfg(any(feature = "v2_8", feature = "dox"))]
    fn is_playing_audio(&self) -> bool {
        unsafe {
            from_glib(webkit2_sys::webkit_web_view_is_playing_audio(self.as_ref().to_glib_none().0))
        }
    }

    fn load_alternate_html(&self, content: &str, content_uri: &str, base_uri: Option<&str>) {
        unsafe {
            webkit2_sys::webkit_web_view_load_alternate_html(self.as_ref().to_glib_none().0, content.to_glib_none().0, content_uri.to_glib_none().0, base_uri.to_glib_none().0);
        }
    }

    #[cfg(any(feature = "v2_6", feature = "dox"))]
    fn load_bytes(&self, bytes: &glib::Bytes, mime_type: Option<&str>, encoding: Option<&str>, base_uri: Option<&str>) {
        unsafe {
            webkit2_sys::webkit_web_view_load_bytes(self.as_ref().to_glib_none().0, bytes.to_glib_none().0, mime_type.to_glib_none().0, encoding.to_glib_none().0, base_uri.to_glib_none().0);
        }
    }

    fn load_html(&self, content: &str, base_uri: Option<&str>) {
        unsafe {
            webkit2_sys::webkit_web_view_load_html(self.as_ref().to_glib_none().0, content.to_glib_none().0, base_uri.to_glib_none().0);
        }
    }

    fn load_plain_text(&self, plain_text: &str) {
        unsafe {
            webkit2_sys::webkit_web_view_load_plain_text(self.as_ref().to_glib_none().0, plain_text.to_glib_none().0);
        }
    }

    fn load_request<P: IsA<URIRequest>>(&self, request: &P) {
        unsafe {
            webkit2_sys::webkit_web_view_load_request(self.as_ref().to_glib_none().0, request.as_ref().to_glib_none().0);
        }
    }

    fn load_uri(&self, uri: &str) {
        unsafe {
            webkit2_sys::webkit_web_view_load_uri(self.as_ref().to_glib_none().0, uri.to_glib_none().0);
        }
    }

    fn reload(&self) {
        unsafe {
            webkit2_sys::webkit_web_view_reload(self.as_ref().to_glib_none().0);
        }
    }

    fn reload_bypass_cache(&self) {
        unsafe {
            webkit2_sys::webkit_web_view_reload_bypass_cache(self.as_ref().to_glib_none().0);
        }
    }

    #[cfg(any(feature = "v2_12", feature = "dox"))]
    fn restore_session_state(&self, state: &WebViewSessionState) {
        unsafe {
            webkit2_sys::webkit_web_view_restore_session_state(self.as_ref().to_glib_none().0, state.to_glib_none().0);
        }
    }

    fn run_javascript<P: IsA<gio::Cancellable>, Q: FnOnce(Result<JavascriptResult, glib::Error>) + Send + 'static>(&self, script: &str, cancellable: Option<&P>, callback: Q) {
        let user_data: Box_<Q> = Box_::new(callback);
        unsafe extern "C" fn run_javascript_trampoline<Q: FnOnce(Result<JavascriptResult, glib::Error>) + Send + 'static>(_source_object: *mut gobject_sys::GObject, res: *mut gio_sys::GAsyncResult, user_data: glib_sys::gpointer) {
            let mut error = ptr::null_mut();
            let ret = webkit2_sys::webkit_web_view_run_javascript_finish(_source_object as *mut _, res, &mut error);
            let result = if error.is_null() { Ok(from_glib_full(ret)) } else { Err(from_glib_full(error)) };
            let callback: Box_<Q> = Box_::from_raw(user_data as *mut _);
            callback(result);
        }
        let callback = run_javascript_trampoline::<Q>;
        unsafe {
            webkit2_sys::webkit_web_view_run_javascript(self.as_ref().to_glib_none().0, script.to_glib_none().0, cancellable.map(|p| p.as_ref()).to_glib_none().0, Some(callback), Box_::into_raw(user_data) as *mut _);
        }
    }

    
    fn run_javascript_future(&self, script: &str) -> Pin<Box_<dyn std::future::Future<Output = Result<JavascriptResult, glib::Error>> + 'static>> {

        let script = String::from(script);
        Box_::pin(gio::GioFuture::new(self, move |obj, send| {
            let cancellable = gio::Cancellable::new();
            obj.run_javascript(
                &script,
                Some(&cancellable),
                move |res| {
                    send.resolve(res);
                },
            );

            cancellable
        }))
    }

    fn run_javascript_from_gresource<P: IsA<gio::Cancellable>, Q: FnOnce(Result<JavascriptResult, glib::Error>) + Send + 'static>(&self, resource: &str, cancellable: Option<&P>, callback: Q) {
        let user_data: Box_<Q> = Box_::new(callback);
        unsafe extern "C" fn run_javascript_from_gresource_trampoline<Q: FnOnce(Result<JavascriptResult, glib::Error>) + Send + 'static>(_source_object: *mut gobject_sys::GObject, res: *mut gio_sys::GAsyncResult, user_data: glib_sys::gpointer) {
            let mut error = ptr::null_mut();
            let ret = webkit2_sys::webkit_web_view_run_javascript_from_gresource_finish(_source_object as *mut _, res, &mut error);
            let result = if error.is_null() { Ok(from_glib_full(ret)) } else { Err(from_glib_full(error)) };
            let callback: Box_<Q> = Box_::from_raw(user_data as *mut _);
            callback(result);
        }
        let callback = run_javascript_from_gresource_trampoline::<Q>;
        unsafe {
            webkit2_sys::webkit_web_view_run_javascript_from_gresource(self.as_ref().to_glib_none().0, resource.to_glib_none().0, cancellable.map(|p| p.as_ref()).to_glib_none().0, Some(callback), Box_::into_raw(user_data) as *mut _);
        }
    }

    
    fn run_javascript_from_gresource_future(&self, resource: &str) -> Pin<Box_<dyn std::future::Future<Output = Result<JavascriptResult, glib::Error>> + 'static>> {

        let resource = String::from(resource);
        Box_::pin(gio::GioFuture::new(self, move |obj, send| {
            let cancellable = gio::Cancellable::new();
            obj.run_javascript_from_gresource(
                &resource,
                Some(&cancellable),
                move |res| {
                    send.resolve(res);
                },
            );

            cancellable
        }))
    }

    #[cfg(any(feature = "v2_22", feature = "dox"))]
    fn run_javascript_in_world<P: IsA<gio::Cancellable>, Q: FnOnce(Result<JavascriptResult, glib::Error>) + Send + 'static>(&self, script: &str, world_name: &str, cancellable: Option<&P>, callback: Q) {
        let user_data: Box_<Q> = Box_::new(callback);
        unsafe extern "C" fn run_javascript_in_world_trampoline<Q: FnOnce(Result<JavascriptResult, glib::Error>) + Send + 'static>(_source_object: *mut gobject_sys::GObject, res: *mut gio_sys::GAsyncResult, user_data: glib_sys::gpointer) {
            let mut error = ptr::null_mut();
            let ret = webkit2_sys::webkit_web_view_run_javascript_in_world_finish(_source_object as *mut _, res, &mut error);
            let result = if error.is_null() { Ok(from_glib_full(ret)) } else { Err(from_glib_full(error)) };
            let callback: Box_<Q> = Box_::from_raw(user_data as *mut _);
            callback(result);
        }
        let callback = run_javascript_in_world_trampoline::<Q>;
        unsafe {
            webkit2_sys::webkit_web_view_run_javascript_in_world(self.as_ref().to_glib_none().0, script.to_glib_none().0, world_name.to_glib_none().0, cancellable.map(|p| p.as_ref()).to_glib_none().0, Some(callback), Box_::into_raw(user_data) as *mut _);
        }
    }

    
    #[cfg(any(feature = "v2_22", feature = "dox"))]
    fn run_javascript_in_world_future(&self, script: &str, world_name: &str) -> Pin<Box_<dyn std::future::Future<Output = Result<JavascriptResult, glib::Error>> + 'static>> {

        let script = String::from(script);
        let world_name = String::from(world_name);
        Box_::pin(gio::GioFuture::new(self, move |obj, send| {
            let cancellable = gio::Cancellable::new();
            obj.run_javascript_in_world(
                &script,
                &world_name,
                Some(&cancellable),
                move |res| {
                    send.resolve(res);
                },
            );

            cancellable
        }))
    }

    fn save<P: IsA<gio::Cancellable>, Q: FnOnce(Result<gio::InputStream, glib::Error>) + Send + 'static>(&self, save_mode: SaveMode, cancellable: Option<&P>, callback: Q) {
        let user_data: Box_<Q> = Box_::new(callback);
        unsafe extern "C" fn save_trampoline<Q: FnOnce(Result<gio::InputStream, glib::Error>) + Send + 'static>(_source_object: *mut gobject_sys::GObject, res: *mut gio_sys::GAsyncResult, user_data: glib_sys::gpointer) {
            let mut error = ptr::null_mut();
            let ret = webkit2_sys::webkit_web_view_save_finish(_source_object as *mut _, res, &mut error);
            let result = if error.is_null() { Ok(from_glib_full(ret)) } else { Err(from_glib_full(error)) };
            let callback: Box_<Q> = Box_::from_raw(user_data as *mut _);
            callback(result);
        }
        let callback = save_trampoline::<Q>;
        unsafe {
            webkit2_sys::webkit_web_view_save(self.as_ref().to_glib_none().0, save_mode.to_glib(), cancellable.map(|p| p.as_ref()).to_glib_none().0, Some(callback), Box_::into_raw(user_data) as *mut _);
        }
    }

    
    fn save_future(&self, save_mode: SaveMode) -> Pin<Box_<dyn std::future::Future<Output = Result<gio::InputStream, glib::Error>> + 'static>> {

        Box_::pin(gio::GioFuture::new(self, move |obj, send| {
            let cancellable = gio::Cancellable::new();
            obj.save(
                save_mode,
                Some(&cancellable),
                move |res| {
                    send.resolve(res);
                },
            );

            cancellable
        }))
    }

    fn save_to_file<P: IsA<gio::File>, Q: IsA<gio::Cancellable>, R: FnOnce(Result<(), glib::Error>) + Send + 'static>(&self, file: &P, save_mode: SaveMode, cancellable: Option<&Q>, callback: R) {
        let user_data: Box_<R> = Box_::new(callback);
        unsafe extern "C" fn save_to_file_trampoline<R: FnOnce(Result<(), glib::Error>) + Send + 'static>(_source_object: *mut gobject_sys::GObject, res: *mut gio_sys::GAsyncResult, user_data: glib_sys::gpointer) {
            let mut error = ptr::null_mut();
            let _ = webkit2_sys::webkit_web_view_save_to_file_finish(_source_object as *mut _, res, &mut error);
            let result = if error.is_null() { Ok(()) } else { Err(from_glib_full(error)) };
            let callback: Box_<R> = Box_::from_raw(user_data as *mut _);
            callback(result);
        }
        let callback = save_to_file_trampoline::<R>;
        unsafe {
            webkit2_sys::webkit_web_view_save_to_file(self.as_ref().to_glib_none().0, file.as_ref().to_glib_none().0, save_mode.to_glib(), cancellable.map(|p| p.as_ref()).to_glib_none().0, Some(callback), Box_::into_raw(user_data) as *mut _);
        }
    }

    
    fn save_to_file_future<P: IsA<gio::File> + Clone + 'static>(&self, file: &P, save_mode: SaveMode) -> Pin<Box_<dyn std::future::Future<Output = Result<(), glib::Error>> + 'static>> {

        let file = file.clone();
        Box_::pin(gio::GioFuture::new(self, move |obj, send| {
            let cancellable = gio::Cancellable::new();
            obj.save_to_file(
                &file,
                save_mode,
                Some(&cancellable),
                move |res| {
                    send.resolve(res);
                },
            );

            cancellable
        }))
    }

    #[cfg(any(feature = "v2_28", feature = "dox"))]
    fn send_message_to_page<P: IsA<UserMessage>, Q: IsA<gio::Cancellable>, R: FnOnce(Result<UserMessage, glib::Error>) + Send + 'static>(&self, message: &P, cancellable: Option<&Q>, callback: R) {
        let user_data: Box_<R> = Box_::new(callback);
        unsafe extern "C" fn send_message_to_page_trampoline<R: FnOnce(Result<UserMessage, glib::Error>) + Send + 'static>(_source_object: *mut gobject_sys::GObject, res: *mut gio_sys::GAsyncResult, user_data: glib_sys::gpointer) {
            let mut error = ptr::null_mut();
            let ret = webkit2_sys::webkit_web_view_send_message_to_page_finish(_source_object as *mut _, res, &mut error);
            let result = if error.is_null() { Ok(from_glib_full(ret)) } else { Err(from_glib_full(error)) };
            let callback: Box_<R> = Box_::from_raw(user_data as *mut _);
            callback(result);
        }
        let callback = send_message_to_page_trampoline::<R>;
        unsafe {
            webkit2_sys::webkit_web_view_send_message_to_page(self.as_ref().to_glib_none().0, message.as_ref().to_glib_none().0, cancellable.map(|p| p.as_ref()).to_glib_none().0, Some(callback), Box_::into_raw(user_data) as *mut _);
        }
    }

    
    #[cfg(any(feature = "v2_28", feature = "dox"))]
    fn send_message_to_page_future<P: IsA<UserMessage> + Clone + 'static>(&self, message: &P) -> Pin<Box_<dyn std::future::Future<Output = Result<UserMessage, glib::Error>> + 'static>> {

        let message = message.clone();
        Box_::pin(gio::GioFuture::new(self, move |obj, send| {
            let cancellable = gio::Cancellable::new();
            obj.send_message_to_page(
                &message,
                Some(&cancellable),
                move |res| {
                    send.resolve(res);
                },
            );

            cancellable
        }))
    }

    #[cfg(any(feature = "v2_8", feature = "dox"))]
    fn set_background_color(&self, rgba: &gdk::RGBA) {
        unsafe {
            webkit2_sys::webkit_web_view_set_background_color(self.as_ref().to_glib_none().0, rgba.to_glib_none().0);
        }
    }

    fn set_custom_charset(&self, charset: Option<&str>) {
        unsafe {
            webkit2_sys::webkit_web_view_set_custom_charset(self.as_ref().to_glib_none().0, charset.to_glib_none().0);
        }
    }

    #[cfg(any(feature = "v2_8", feature = "dox"))]
    fn set_editable(&self, editable: bool) {
        unsafe {
            webkit2_sys::webkit_web_view_set_editable(self.as_ref().to_glib_none().0, editable.to_glib());
        }
    }

    #[cfg(any(feature = "v2_28", feature = "dox"))]
    fn set_input_method_context<P: IsA<InputMethodContext>>(&self, context: Option<&P>) {
        unsafe {
            webkit2_sys::webkit_web_view_set_input_method_context(self.as_ref().to_glib_none().0, context.map(|p| p.as_ref()).to_glib_none().0);
        }
    }

    fn set_settings<P: IsA<Settings>>(&self, settings: &P) {
        unsafe {
            webkit2_sys::webkit_web_view_set_settings(self.as_ref().to_glib_none().0, settings.as_ref().to_glib_none().0);
        }
    }

    fn set_zoom_level(&self, zoom_level: f64) {
        unsafe {
            webkit2_sys::webkit_web_view_set_zoom_level(self.as_ref().to_glib_none().0, zoom_level);
        }
    }

    fn stop_loading(&self) {
        unsafe {
            webkit2_sys::webkit_web_view_stop_loading(self.as_ref().to_glib_none().0);
        }
    }

    #[cfg(any(feature = "v2_12", feature = "dox"))]
    fn try_close(&self) {
        unsafe {
            webkit2_sys::webkit_web_view_try_close(self.as_ref().to_glib_none().0);
        }
    }

    #[cfg(any(feature = "v2_8", feature = "dox"))]
    fn get_property_editable(&self) -> bool {
        unsafe {
            let mut value = Value::from_type(<bool as StaticType>::static_type());
            gobject_sys::g_object_get_property(self.to_glib_none().0 as *mut gobject_sys::GObject, b"editable\0".as_ptr() as *const _, value.to_glib_none_mut().0);
            value.get().expect("Return Value for property `editable` getter").unwrap()
        }
    }

    #[cfg(any(feature = "v2_18", feature = "dox"))]
    fn get_property_is_controlled_by_automation(&self) -> bool {
        unsafe {
            let mut value = Value::from_type(<bool as StaticType>::static_type());
            gobject_sys::g_object_get_property(self.to_glib_none().0 as *mut gobject_sys::GObject, b"is-controlled-by-automation\0".as_ptr() as *const _, value.to_glib_none_mut().0);
            value.get().expect("Return Value for property `is-controlled-by-automation` getter").unwrap()
        }
    }

    #[cfg(any(feature = "v2_16", feature = "dox"))]
    fn get_property_is_ephemeral(&self) -> bool {
        unsafe {
            let mut value = Value::from_type(<bool as StaticType>::static_type());
            gobject_sys::g_object_get_property(self.to_glib_none().0 as *mut gobject_sys::GObject, b"is-ephemeral\0".as_ptr() as *const _, value.to_glib_none_mut().0);
            value.get().expect("Return Value for property `is-ephemeral` getter").unwrap()
        }
    }

    fn get_property_is_loading(&self) -> bool {
        unsafe {
            let mut value = Value::from_type(<bool as StaticType>::static_type());
            gobject_sys::g_object_get_property(self.to_glib_none().0 as *mut gobject_sys::GObject, b"is-loading\0".as_ptr() as *const _, value.to_glib_none_mut().0);
            value.get().expect("Return Value for property `is-loading` getter").unwrap()
        }
    }

    #[cfg(any(feature = "v2_8", feature = "dox"))]
    fn get_property_is_playing_audio(&self) -> bool {
        unsafe {
            let mut value = Value::from_type(<bool as StaticType>::static_type());
            gobject_sys::g_object_get_property(self.to_glib_none().0 as *mut gobject_sys::GObject, b"is-playing-audio\0".as_ptr() as *const _, value.to_glib_none_mut().0);
            value.get().expect("Return Value for property `is-playing-audio` getter").unwrap()
        }
    }

    fn get_property_web_context(&self) -> Option<WebContext> {
        unsafe {
            let mut value = Value::from_type(<WebContext as StaticType>::static_type());
            gobject_sys::g_object_get_property(self.to_glib_none().0 as *mut gobject_sys::GObject, b"web-context\0".as_ptr() as *const _, value.to_glib_none_mut().0);
            value.get().expect("Return Value for property `web-context` getter")
        }
    }

    #[cfg(any(feature = "v2_2", feature = "dox"))]
    fn connect_authenticate<F: Fn(&Self, &AuthenticationRequest) -> bool + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn authenticate_trampoline<P, F: Fn(&P, &AuthenticationRequest) -> bool + 'static>(this: *mut webkit2_sys::WebKitWebView, request: *mut webkit2_sys::WebKitAuthenticationRequest, f: glib_sys::gpointer) -> glib_sys::gboolean
            where P: IsA<WebView>
        {
            let f: &F = &*(f as *const F);
            f(&WebView::from_glib_borrow(this).unsafe_cast_ref(), &from_glib_borrow(request)).to_glib()
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"authenticate\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(authenticate_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    fn connect_close<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn close_trampoline<P, F: Fn(&P) + 'static>(this: *mut webkit2_sys::WebKitWebView, f: glib_sys::gpointer)
            where P: IsA<WebView>
        {
            let f: &F = &*(f as *const F);
            f(&WebView::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"close\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(close_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    fn connect_context_menu<F: Fn(&Self, &ContextMenu, &gdk::Event, &HitTestResult) -> bool + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn context_menu_trampoline<P, F: Fn(&P, &ContextMenu, &gdk::Event, &HitTestResult) -> bool + 'static>(this: *mut webkit2_sys::WebKitWebView, context_menu: *mut webkit2_sys::WebKitContextMenu, event: *mut gdk_sys::GdkEvent, hit_test_result: *mut webkit2_sys::WebKitHitTestResult, f: glib_sys::gpointer) -> glib_sys::gboolean
            where P: IsA<WebView>
        {
            let f: &F = &*(f as *const F);
            f(&WebView::from_glib_borrow(this).unsafe_cast_ref(), &from_glib_borrow(context_menu), &from_glib_none(event), &from_glib_borrow(hit_test_result)).to_glib()
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"context-menu\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(context_menu_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    fn connect_context_menu_dismissed<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn context_menu_dismissed_trampoline<P, F: Fn(&P) + 'static>(this: *mut webkit2_sys::WebKitWebView, f: glib_sys::gpointer)
            where P: IsA<WebView>
        {
            let f: &F = &*(f as *const F);
            f(&WebView::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"context-menu-dismissed\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(context_menu_dismissed_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[cfg(any(feature = "v2_6", feature = "dox"))]
    fn connect_create<F: Fn(&Self, &NavigationAction) -> Option<gtk::Widget> + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn create_trampoline<P, F: Fn(&P, &NavigationAction) -> Option<gtk::Widget> + 'static>(this: *mut webkit2_sys::WebKitWebView, navigation_action: *mut webkit2_sys::WebKitNavigationAction, f: glib_sys::gpointer) -> *mut gtk_sys::GtkWidget
            where P: IsA<WebView>
        {
            let f: &F = &*(f as *const F);
            f(&WebView::from_glib_borrow(this).unsafe_cast_ref(), &from_glib_borrow(navigation_action)).to_glib_full()
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"create\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(create_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    fn connect_decide_policy<F: Fn(&Self, &PolicyDecision, PolicyDecisionType) -> bool + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn decide_policy_trampoline<P, F: Fn(&P, &PolicyDecision, PolicyDecisionType) -> bool + 'static>(this: *mut webkit2_sys::WebKitWebView, decision: *mut webkit2_sys::WebKitPolicyDecision, decision_type: webkit2_sys::WebKitPolicyDecisionType, f: glib_sys::gpointer) -> glib_sys::gboolean
            where P: IsA<WebView>
        {
            let f: &F = &*(f as *const F);
            f(&WebView::from_glib_borrow(this).unsafe_cast_ref(), &from_glib_borrow(decision), from_glib(decision_type)).to_glib()
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"decide-policy\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(decide_policy_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    fn connect_enter_fullscreen<F: Fn(&Self) -> bool + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn enter_fullscreen_trampoline<P, F: Fn(&P) -> bool + 'static>(this: *mut webkit2_sys::WebKitWebView, f: glib_sys::gpointer) -> glib_sys::gboolean
            where P: IsA<WebView>
        {
            let f: &F = &*(f as *const F);
            f(&WebView::from_glib_borrow(this).unsafe_cast_ref()).to_glib()
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"enter-fullscreen\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(enter_fullscreen_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    fn connect_insecure_content_detected<F: Fn(&Self, InsecureContentEvent) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn insecure_content_detected_trampoline<P, F: Fn(&P, InsecureContentEvent) + 'static>(this: *mut webkit2_sys::WebKitWebView, event: webkit2_sys::WebKitInsecureContentEvent, f: glib_sys::gpointer)
            where P: IsA<WebView>
        {
            let f: &F = &*(f as *const F);
            f(&WebView::from_glib_borrow(this).unsafe_cast_ref(), from_glib(event))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"insecure-content-detected\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(insecure_content_detected_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    fn connect_leave_fullscreen<F: Fn(&Self) -> bool + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn leave_fullscreen_trampoline<P, F: Fn(&P) -> bool + 'static>(this: *mut webkit2_sys::WebKitWebView, f: glib_sys::gpointer) -> glib_sys::gboolean
            where P: IsA<WebView>
        {
            let f: &F = &*(f as *const F);
            f(&WebView::from_glib_borrow(this).unsafe_cast_ref()).to_glib()
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"leave-fullscreen\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(leave_fullscreen_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    fn connect_load_changed<F: Fn(&Self, LoadEvent) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn load_changed_trampoline<P, F: Fn(&P, LoadEvent) + 'static>(this: *mut webkit2_sys::WebKitWebView, load_event: webkit2_sys::WebKitLoadEvent, f: glib_sys::gpointer)
            where P: IsA<WebView>
        {
            let f: &F = &*(f as *const F);
            f(&WebView::from_glib_borrow(this).unsafe_cast_ref(), from_glib(load_event))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"load-changed\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(load_changed_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    fn connect_load_failed<F: Fn(&Self, LoadEvent, &str, &glib::Error) -> bool + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn load_failed_trampoline<P, F: Fn(&P, LoadEvent, &str, &glib::Error) -> bool + 'static>(this: *mut webkit2_sys::WebKitWebView, load_event: webkit2_sys::WebKitLoadEvent, failing_uri: *mut libc::c_char, error: *mut glib_sys::GError, f: glib_sys::gpointer) -> glib_sys::gboolean
            where P: IsA<WebView>
        {
            let f: &F = &*(f as *const F);
            f(&WebView::from_glib_borrow(this).unsafe_cast_ref(), from_glib(load_event), &GString::from_glib_borrow(failing_uri), &from_glib_borrow(error)).to_glib()
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"load-failed\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(load_failed_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[cfg(any(feature = "v2_6", feature = "dox"))]
    fn connect_load_failed_with_tls_errors<F: Fn(&Self, &str, &gio::TlsCertificate, gio::TlsCertificateFlags) -> bool + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn load_failed_with_tls_errors_trampoline<P, F: Fn(&P, &str, &gio::TlsCertificate, gio::TlsCertificateFlags) -> bool + 'static>(this: *mut webkit2_sys::WebKitWebView, failing_uri: *mut libc::c_char, certificate: *mut gio_sys::GTlsCertificate, errors: gio_sys::GTlsCertificateFlags, f: glib_sys::gpointer) -> glib_sys::gboolean
            where P: IsA<WebView>
        {
            let f: &F = &*(f as *const F);
            f(&WebView::from_glib_borrow(this).unsafe_cast_ref(), &GString::from_glib_borrow(failing_uri), &from_glib_borrow(certificate), from_glib(errors)).to_glib()
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"load-failed-with-tls-errors\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(load_failed_with_tls_errors_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    fn connect_mouse_target_changed<F: Fn(&Self, &HitTestResult, u32) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn mouse_target_changed_trampoline<P, F: Fn(&P, &HitTestResult, u32) + 'static>(this: *mut webkit2_sys::WebKitWebView, hit_test_result: *mut webkit2_sys::WebKitHitTestResult, modifiers: libc::c_uint, f: glib_sys::gpointer)
            where P: IsA<WebView>
        {
            let f: &F = &*(f as *const F);
            f(&WebView::from_glib_borrow(this).unsafe_cast_ref(), &from_glib_borrow(hit_test_result), modifiers)
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"mouse-target-changed\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(mouse_target_changed_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    fn connect_permission_request<F: Fn(&Self, &PermissionRequest) -> bool + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn permission_request_trampoline<P, F: Fn(&P, &PermissionRequest) -> bool + 'static>(this: *mut webkit2_sys::WebKitWebView, request: *mut webkit2_sys::WebKitPermissionRequest, f: glib_sys::gpointer) -> glib_sys::gboolean
            where P: IsA<WebView>
        {
            let f: &F = &*(f as *const F);
            f(&WebView::from_glib_borrow(this).unsafe_cast_ref(), &from_glib_borrow(request)).to_glib()
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"permission-request\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(permission_request_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    fn connect_print<F: Fn(&Self, &PrintOperation) -> bool + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn print_trampoline<P, F: Fn(&P, &PrintOperation) -> bool + 'static>(this: *mut webkit2_sys::WebKitWebView, print_operation: *mut webkit2_sys::WebKitPrintOperation, f: glib_sys::gpointer) -> glib_sys::gboolean
            where P: IsA<WebView>
        {
            let f: &F = &*(f as *const F);
            f(&WebView::from_glib_borrow(this).unsafe_cast_ref(), &from_glib_borrow(print_operation)).to_glib()
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"print\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(print_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    fn connect_ready_to_show<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn ready_to_show_trampoline<P, F: Fn(&P) + 'static>(this: *mut webkit2_sys::WebKitWebView, f: glib_sys::gpointer)
            where P: IsA<WebView>
        {
            let f: &F = &*(f as *const F);
            f(&WebView::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"ready-to-show\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(ready_to_show_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    fn connect_resource_load_started<F: Fn(&Self, &WebResource, &URIRequest) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn resource_load_started_trampoline<P, F: Fn(&P, &WebResource, &URIRequest) + 'static>(this: *mut webkit2_sys::WebKitWebView, resource: *mut webkit2_sys::WebKitWebResource, request: *mut webkit2_sys::WebKitURIRequest, f: glib_sys::gpointer)
            where P: IsA<WebView>
        {
            let f: &F = &*(f as *const F);
            f(&WebView::from_glib_borrow(this).unsafe_cast_ref(), &from_glib_borrow(resource), &from_glib_borrow(request))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"resource-load-started\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(resource_load_started_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    fn connect_run_as_modal<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn run_as_modal_trampoline<P, F: Fn(&P) + 'static>(this: *mut webkit2_sys::WebKitWebView, f: glib_sys::gpointer)
            where P: IsA<WebView>
        {
            let f: &F = &*(f as *const F);
            f(&WebView::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"run-as-modal\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(run_as_modal_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[cfg(any(feature = "v2_8", feature = "dox"))]
    fn connect_run_color_chooser<F: Fn(&Self, &ColorChooserRequest) -> bool + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn run_color_chooser_trampoline<P, F: Fn(&P, &ColorChooserRequest) -> bool + 'static>(this: *mut webkit2_sys::WebKitWebView, request: *mut webkit2_sys::WebKitColorChooserRequest, f: glib_sys::gpointer) -> glib_sys::gboolean
            where P: IsA<WebView>
        {
            let f: &F = &*(f as *const F);
            f(&WebView::from_glib_borrow(this).unsafe_cast_ref(), &from_glib_borrow(request)).to_glib()
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"run-color-chooser\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(run_color_chooser_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    fn connect_run_file_chooser<F: Fn(&Self, &FileChooserRequest) -> bool + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn run_file_chooser_trampoline<P, F: Fn(&P, &FileChooserRequest) -> bool + 'static>(this: *mut webkit2_sys::WebKitWebView, request: *mut webkit2_sys::WebKitFileChooserRequest, f: glib_sys::gpointer) -> glib_sys::gboolean
            where P: IsA<WebView>
        {
            let f: &F = &*(f as *const F);
            f(&WebView::from_glib_borrow(this).unsafe_cast_ref(), &from_glib_borrow(request)).to_glib()
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"run-file-chooser\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(run_file_chooser_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    fn connect_script_dialog<F: Fn(&Self, &ScriptDialog) -> bool + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn script_dialog_trampoline<P, F: Fn(&P, &ScriptDialog) -> bool + 'static>(this: *mut webkit2_sys::WebKitWebView, dialog: *mut webkit2_sys::WebKitScriptDialog, f: glib_sys::gpointer) -> glib_sys::gboolean
            where P: IsA<WebView>
        {
            let f: &F = &*(f as *const F);
            f(&WebView::from_glib_borrow(this).unsafe_cast_ref(), &from_glib_borrow(dialog)).to_glib()
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"script-dialog\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(script_dialog_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[cfg(any(feature = "v2_8", feature = "dox"))]
    fn connect_show_notification<F: Fn(&Self, &Notification) -> bool + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn show_notification_trampoline<P, F: Fn(&P, &Notification) -> bool + 'static>(this: *mut webkit2_sys::WebKitWebView, notification: *mut webkit2_sys::WebKitNotification, f: glib_sys::gpointer) -> glib_sys::gboolean
            where P: IsA<WebView>
        {
            let f: &F = &*(f as *const F);
            f(&WebView::from_glib_borrow(this).unsafe_cast_ref(), &from_glib_borrow(notification)).to_glib()
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"show-notification\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(show_notification_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[cfg(any(feature = "v2_28", feature = "dox"))]
    fn connect_show_option_menu<F: Fn(&Self, &OptionMenu, &gdk::Event, &gdk::Rectangle) -> bool + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn show_option_menu_trampoline<P, F: Fn(&P, &OptionMenu, &gdk::Event, &gdk::Rectangle) -> bool + 'static>(this: *mut webkit2_sys::WebKitWebView, object: *mut webkit2_sys::WebKitOptionMenu, p0: *mut gdk_sys::GdkEvent, p1: *mut gdk_sys::GdkRectangle, f: glib_sys::gpointer) -> glib_sys::gboolean
            where P: IsA<WebView>
        {
            let f: &F = &*(f as *const F);
            f(&WebView::from_glib_borrow(this).unsafe_cast_ref(), &from_glib_borrow(object), &from_glib_none(p0), &from_glib_borrow(p1)).to_glib()
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"show-option-menu\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(show_option_menu_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    fn connect_submit_form<F: Fn(&Self, &FormSubmissionRequest) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn submit_form_trampoline<P, F: Fn(&P, &FormSubmissionRequest) + 'static>(this: *mut webkit2_sys::WebKitWebView, request: *mut webkit2_sys::WebKitFormSubmissionRequest, f: glib_sys::gpointer)
            where P: IsA<WebView>
        {
            let f: &F = &*(f as *const F);
            f(&WebView::from_glib_borrow(this).unsafe_cast_ref(), &from_glib_borrow(request))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"submit-form\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(submit_form_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[cfg(any(feature = "v2_28", feature = "dox"))]
    fn connect_user_message_received<F: Fn(&Self, &UserMessage) -> bool + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn user_message_received_trampoline<P, F: Fn(&P, &UserMessage) -> bool + 'static>(this: *mut webkit2_sys::WebKitWebView, message: *mut webkit2_sys::WebKitUserMessage, f: glib_sys::gpointer) -> glib_sys::gboolean
            where P: IsA<WebView>
        {
            let f: &F = &*(f as *const F);
            f(&WebView::from_glib_borrow(this).unsafe_cast_ref(), &from_glib_borrow(message)).to_glib()
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"user-message-received\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(user_message_received_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    fn connect_web_process_crashed<F: Fn(&Self) -> bool + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn web_process_crashed_trampoline<P, F: Fn(&P) -> bool + 'static>(this: *mut webkit2_sys::WebKitWebView, f: glib_sys::gpointer) -> glib_sys::gboolean
            where P: IsA<WebView>
        {
            let f: &F = &*(f as *const F);
            f(&WebView::from_glib_borrow(this).unsafe_cast_ref()).to_glib()
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"web-process-crashed\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(web_process_crashed_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[cfg(any(feature = "v2_20", feature = "dox"))]
    fn connect_web_process_terminated<F: Fn(&Self, WebProcessTerminationReason) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn web_process_terminated_trampoline<P, F: Fn(&P, WebProcessTerminationReason) + 'static>(this: *mut webkit2_sys::WebKitWebView, reason: webkit2_sys::WebKitWebProcessTerminationReason, f: glib_sys::gpointer)
            where P: IsA<WebView>
        {
            let f: &F = &*(f as *const F);
            f(&WebView::from_glib_borrow(this).unsafe_cast_ref(), from_glib(reason))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"web-process-terminated\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(web_process_terminated_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[cfg(any(feature = "v2_8", feature = "dox"))]
    fn connect_property_editable_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_editable_trampoline<P, F: Fn(&P) + 'static>(this: *mut webkit2_sys::WebKitWebView, _param_spec: glib_sys::gpointer, f: glib_sys::gpointer)
            where P: IsA<WebView>
        {
            let f: &F = &*(f as *const F);
            f(&WebView::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::editable\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(notify_editable_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    fn connect_property_estimated_load_progress_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_estimated_load_progress_trampoline<P, F: Fn(&P) + 'static>(this: *mut webkit2_sys::WebKitWebView, _param_spec: glib_sys::gpointer, f: glib_sys::gpointer)
            where P: IsA<WebView>
        {
            let f: &F = &*(f as *const F);
            f(&WebView::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::estimated-load-progress\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(notify_estimated_load_progress_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    fn connect_property_favicon_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_favicon_trampoline<P, F: Fn(&P) + 'static>(this: *mut webkit2_sys::WebKitWebView, _param_spec: glib_sys::gpointer, f: glib_sys::gpointer)
            where P: IsA<WebView>
        {
            let f: &F = &*(f as *const F);
            f(&WebView::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::favicon\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(notify_favicon_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    fn connect_property_is_loading_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_is_loading_trampoline<P, F: Fn(&P) + 'static>(this: *mut webkit2_sys::WebKitWebView, _param_spec: glib_sys::gpointer, f: glib_sys::gpointer)
            where P: IsA<WebView>
        {
            let f: &F = &*(f as *const F);
            f(&WebView::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::is-loading\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(notify_is_loading_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[cfg(any(feature = "v2_8", feature = "dox"))]
    fn connect_property_is_playing_audio_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_is_playing_audio_trampoline<P, F: Fn(&P) + 'static>(this: *mut webkit2_sys::WebKitWebView, _param_spec: glib_sys::gpointer, f: glib_sys::gpointer)
            where P: IsA<WebView>
        {
            let f: &F = &*(f as *const F);
            f(&WebView::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::is-playing-audio\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(notify_is_playing_audio_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[cfg(any(feature = "v2_28", feature = "dox"))]
    fn connect_property_page_id_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_page_id_trampoline<P, F: Fn(&P) + 'static>(this: *mut webkit2_sys::WebKitWebView, _param_spec: glib_sys::gpointer, f: glib_sys::gpointer)
            where P: IsA<WebView>
        {
            let f: &F = &*(f as *const F);
            f(&WebView::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::page-id\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(notify_page_id_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[cfg(any(feature = "v2_6", feature = "dox"))]
    fn connect_property_settings_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_settings_trampoline<P, F: Fn(&P) + 'static>(this: *mut webkit2_sys::WebKitWebView, _param_spec: glib_sys::gpointer, f: glib_sys::gpointer)
            where P: IsA<WebView>
        {
            let f: &F = &*(f as *const F);
            f(&WebView::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::settings\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(notify_settings_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    fn connect_property_title_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_title_trampoline<P, F: Fn(&P) + 'static>(this: *mut webkit2_sys::WebKitWebView, _param_spec: glib_sys::gpointer, f: glib_sys::gpointer)
            where P: IsA<WebView>
        {
            let f: &F = &*(f as *const F);
            f(&WebView::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::title\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(notify_title_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    fn connect_property_uri_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_uri_trampoline<P, F: Fn(&P) + 'static>(this: *mut webkit2_sys::WebKitWebView, _param_spec: glib_sys::gpointer, f: glib_sys::gpointer)
            where P: IsA<WebView>
        {
            let f: &F = &*(f as *const F);
            f(&WebView::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::uri\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(notify_uri_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    fn connect_property_zoom_level_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_zoom_level_trampoline<P, F: Fn(&P) + 'static>(this: *mut webkit2_sys::WebKitWebView, _param_spec: glib_sys::gpointer, f: glib_sys::gpointer)
            where P: IsA<WebView>
        {
            let f: &F = &*(f as *const F);
            f(&WebView::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::zoom-level\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(notify_zoom_level_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }
}

impl fmt::Display for WebView {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "WebView")
    }
}
